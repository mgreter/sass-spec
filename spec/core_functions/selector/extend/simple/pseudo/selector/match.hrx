<===> README.md
Specs for which selectors with argument lists count as "the same" when
determining which simple selectors to extend. `selector-extend` doesn't care
about the semantics of particular pseudo selectors. All it looks at is whether
they're structurally equal.

<===>
================================================================================
<===> unprefixed/class/equal/input.scss
a {b: selector-extend(":matches(c d.e, f g)", ":matches(c d.e, f g)", "h")}

<===> unprefixed/class/equal/output.css
a {
  b: :matches(c d.e, f g), h;
}

<===>
================================================================================
<===> unprefixed/class/unequal/name/input.scss
a {b: selector-extend(":matches(c d.e, f g)", ":-pfx-matches(c d.e, f g)", "h")}

<===> unprefixed/class/unequal/name/output.css
a {
  b: :matches(c d.e, f g);
}

<===>
================================================================================
<===> unprefixed/class/unequal/argument/input.scss
a {b: selector-extend(":matches(c d.e, f g)", ":matches(d, g)", "h")}

<===> unprefixed/class/unequal/argument/output.css
a {
  b: :matches(c d.e, f g);
}

<===>
================================================================================
<===> unprefixed/class/unequal/has_argument/input.scss
a {b: selector-extend(":matches(c d.e, f g)", ":matches", "h")}

<===> unprefixed/class/unequal/has_argument/output.css
a {
  b: :matches(c d.e, f g);
}

<===>
================================================================================
<===> unprefixed/element/equal/input.scss
a {b: selector-extend("::slotted(c.d, e.f)", "::slotted(c.d, e.f)", "g")}

<===> unprefixed/element/equal/output.css
a {
  b: ::slotted(c.d, e.f), g;
}

<===>
================================================================================
<===> unprefixed/element/unequal/name/input.scss
a {b: selector-extend("::slotted(c.d, e.f)", "::-pfx-slotted(c.d, e.f)", "g")}

<===> unprefixed/element/unequal/name/output.css
a {
  b: ::slotted(c.d, e.f);
}

<===>
================================================================================
<===> unprefixed/element/unequal/argument/input.scss
a {b: selector-extend("::slotted(c.d, e.f)", "::slotted(d, g)", "g")}

<===> unprefixed/element/unequal/argument/output.css
a {
  b: ::slotted(c.d, e.f);
}

<===>
================================================================================
<===> unprefixed/element/unequal/has_argument/input.scss
a {b: selector-extend("::slotted(c.d, e.f)", "::slotted", "g")}

<===> unprefixed/element/unequal/has_argument/output.css
a {
  b: ::slotted(c.d, e.f);
}

<===>
================================================================================
<===> prefixed/equal/input.scss
a {
  b: selector-extend(
      ":nth-child(2n + 1 of c d.e, f g)",
      ":nth-child(2n + 1 of c d.e, f g)",
      "h");
}

<===> prefixed/equal/output.css
a {
  b: :nth-child(2n+1 of c d.e, f g), h;
}

<===>
================================================================================
<===> prefixed/unequal/name/input.scss
a {
  b: selector-extend(
      ":nth-child(2n + 1 of c d.e, f g)",
      ":nth-last-child(2n + 1 of c d.e, f g)",
      "h");
}

<===> prefixed/unequal/name/output.css
a {
  b: :nth-child(2n+1 of c d.e, f g);
}

<===>
================================================================================
<===> prefixed/unequal/argument/input.scss
a {
  b: selector-extend(
      ":nth-child(2n + 1 of c d.e, f g)",
      ":nth-child(2n + 1 of d, g)",
      "h");
}

<===> prefixed/unequal/argument/output.css
a {
  b: :nth-child(2n+1 of c d.e, f g);
}

<===>
================================================================================
<===> prefixed/unequal/prefix/input.scss
a {
  b: selector-extend(
      ":nth-child(2n + 1 of c d.e, f g)",
      ":nth-child(2n of c d.e, f g)",
      "h");
}

<===> prefixed/unequal/prefix/output.css
a {
  b: :nth-child(2n+1 of c d.e, f g);
}

<===>
================================================================================
<===> prefixed/unequal/has_argument/input.scss
a {b: selector-extend(":nth-child(2n + 1 of c d.e, f g)", ":nth-child", "h")}

<===> prefixed/unequal/has_argument/output.css
a {
  b: :nth-child(2n+1 of c d.e, f g);
}
